version: 2.1

commands:
  sccache:
    steps:
      - run:
          name: Install `sccache`
          command: scripts/sccache.sh
          environment:
            SCCACHE_SCHEDULER_HOSTNAME: ppc-{{ random }}-scheduler

  sccache-dist:
    steps:
      - run:
          name: Install `bubblewrap`
          command: scripts/bubblewrap.sh

      - run:
          name: Install `sccache-dist`
          command: scripts/sccache_dist.sh

  sccache-dist-scheduler:
    steps:
      - run:
          name: Start `sccache-dist scheduler`
          command: scripts/sccache_dist_scheduler.sh {{ random }}
          no_output_timeout: 24h

  sccache-dist-server:
    steps:
      - run:
          name: Start `sccache-dist server`
          command: scripts/sccache_dist_server.sh
          no_output_timeout: 24h
          environment:
            SCCACHE_SCHEDULER_HOSTNAME: ppc-{{ random }}-scheduler

  tailscale:
    parameters:
      args:
        type: string

    steps:
      - run:
          name: Execute `tailscale` command
          command: scripts/tailscale.sh << parameters.args >>

  wait:
    steps:
      - run:
          name: Wait indefinitely (almost)
          command: sleep 86400
          no_output_timeout: 24h

jobs:
  sccache-client:
    resource_class: medium

    machine:
      image: ubuntu-2204:current

    steps:
      - checkout
      - tailscale:
          args: up --authkey=$TS_AUTH_KEY --hostname=ppc-{{ random }}-client --ssh
      - sccache
      - wait
      - tailscale:
          args: logout

  sccache-scheduler:
    resource_class: medium

    machine:
      image: ubuntu-2204:current

    steps:
      - checkout
      - tailscale:
          args: up --authkey=$TS_AUTH_KEY --hostname=ppc-{{ random }}-scheduler --ssh
      - sccache-dist
      - sccache-dist-scheduler
      - tailscale:
          args: logout

  {% for i in range(28) %}
  sccache-server-{{ i }}:
    resource_class: large

    machine:
      image: ubuntu-2204:current

    steps:
      - checkout
      - tailscale:
          args: up --authkey=$TS_AUTH_KEY --hostname=ppc-{{ random }}-server-{{ i }} --ssh
      - sccache-dist
      - sccache-dist-server
      - tailscale:
          args: logout
  {% endfor %}

workflows:
  sccache:
    jobs:
      - sccache-client
      - sccache-scheduler

      {% for i in range(6) %}
      - sccache-server-approval-{{ i }}:
          type: approval
      {% for j in range(5 if i != 5 else 3) %}
      - sccache-server-{{ (i * 5) + j }}:
          requires:
            - sccache-server-approval-{{ i }}
      {% endfor %}
      {% endfor %}
