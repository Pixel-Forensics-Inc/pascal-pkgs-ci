name: Apply patches

inputs:
  ref:
    type: string

  repository:
    type: string

runs:
  using: "composite"

  steps:
    - name: Apply patches
      shell: bash
      run: |
        # Constants
        readonly PATCHES_PATH="$PWD/patches/${{ inputs.repository }}/${{ inputs.ref }}"

        # Go to target directory
        cd "${{ inputs.repository }}/${{ inputs.ref }}"

        # Configure git
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config user.name "github-actions[bot]"

        # Print debug information
        git status

        # If patches exists
        if [ -d "$PATCHES_PATH" ]; then
          # Apply patches
          for patch in "$PATCHES_PATH"/*; do
            # Apply patch
            if [[ "$patch" == *.patch ]]; then
              # Log patch name
              echo "Applying patch $patch..."

              # Apply
              patch --no-backup-if-mismatch --strip=1 < "$patch" || exit 1
            fi

            # Apply script
            if [[ "$patch" == *.sh ]]; then
              # Log script name
              echo "Applying script $patch..."

              # Apply
              bash "$patch" || exit 1
            fi
          done

          # Do not exit on errors
          set +e

          # Capture tag
          tag=$(git describe --exact-match --tags)
          tag_code=$?

          # Exit on errors
          set -e

          # Commit changes
          git add .
          git commit --allow-empty --message "(pascal-pkgs-ci) Apply patches"

          # Restore tag
          if [ "$tag_code" = "0" ]; then
            git tag --force --message "(pascal-pkgs-ci) Apply patches" "$tag"
          fi
        fi

        # Print debug information
        git status
